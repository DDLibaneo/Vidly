@model IEnumerable<Vidly.Models.Customer>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Customers</h2>

<p>
    @Html.ActionLink("New Customer", "New", "Customers", new { }, new { @class = "btn btn-primary" })
</p>

<table id="customers" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Customer</th>
            <th>Membership Type</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

@section scripts
{
    <script>
        $(document).ready(function () {
            var table = $("#customers").DataTable({ // o {} é um configuration object
                ajax: { // ajax é uma propriedade do datatable, ajax é tb um objeto com 2 propriedades:
                    url: "/api/customers",
                    dataSrc: "" // como essa Action da API retorna uma lista, o dataSrc é vazio.
                },
                columns: [ // the columns property is an array. for each column we supply an object
                    {
                        data: "name", // in the data property we supply where to get the data for this column. In this case the DataTable will look for the "name" property of the customer object.
                        render: function (data, type, customer) { // this function will be called for rendering each row in the table. 1st parameter is the data property, 2nd parameter is the type for the column, and the 3rd parameter is is actual object, or row we're rendering.
                            return "<a href='/customers/edit/" + customer.id + "'>" + customer.name + "</a>"; // in this function we return a string
                        }
                    },
                    {
                        data: "membershipType.name"
                    },
                    {
                        data: "id",
                        render: function (data) { // in this case, the data parameter is the id of the customer.
                            return "<button class='btn-link js-delete' data-customer-id=" + data + ">Delete</button>"; 
                        }
                    }

                ]
            });

            $("#customers").on("click", ".js-delete" , function () {
                var button = $(this);

                bootbox.confirm("Are you sure you want to delete this customer?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/customers/" + button.attr("data-customer-id"),
                            method: "DELETE",
                            success: function () {
                                table.row(button.parents("tr")).remove().draw(); // row(), remove() e draw() são todos da API do Datatable do Jquery. Podemos achar estes e outros métodos na documentação: http://datatables.net
                            }
                        });
                    }
                });
            });
        });
    </script>    
}
